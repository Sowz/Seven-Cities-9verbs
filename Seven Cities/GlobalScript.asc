//LEGAL DETAILS AND LICENSE: See header file

/*********** CUSTOM FUNCTIONS ******************************/
function surface_delayRelease(this DrawingSurface*)
{
  WAIT_40
  this.Release();
 
}



/*********** END OF CUSTOM FUNCTIONS ******************************/

// Called when the game starts, before the first room is loaded
function game_start() {
  /*
  ///////////
  // test string length
  ///////////
  String s = "";
  int count = 0;
  int count2=0;
  while (true) {
      s=s.Append("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
      count++;
      count2++;
      if (count2>3000) {
        if (count>=1000) {
           Display(String.Format("%d", count2));
           count=0;
        }
      }
  }
  */
 
  ///////////
  // ~test string length
  ///////////
  
  
  #ifdef BETATEST
    //SafeFile.HealthCheck("tracker.txt");
    DebugGui.ShowDebugButton();
    AGSConsole.EnableShortcut(true);
    DebugGui.CheckTestersName();
  #endif
  
    
  GUIlogic.InitializeGUI(); // Please note: mouse starts out NOT VISIBLE.  It is made visible when menu is entered.  (see Menu Room)
  //InitTextArea();
  
  #ifdef SOCKETS
  AGSConsole.EnableSockets();
  #endif
  AGSConsole.SetState(eConsoleOn); //module 'AGS console'
  
  mouse.Visible = false;
  
  //SmoothScroll_ScrollingOn(); //turn on smooth scrolling
  //SmoothScroll_PxOff();//disable parallax effect
  

}





// Main Game Cycle
function repeatedly_execute() {
  /*
    modif hadrien
    if (!IsGamePaused() && game.room_height)  {
    ActionsLogic.DetectAvailableRightClick(); //do that once per loop
    
    //highlight the corresponding button on the GUI
    GUIlogic.HighlightActionButton(ActionsLogic.GetAvailableRightClick());
    
    // status bar line text
    GUIlogic.UpdateStatusBar(); //displays such text as "Look at + object under mouse"
      
    WalkFast.ManageTimer();
  }*/
}


function repeatedly_execute_always() {
  
  //CustomLoad.ManageTimer(); //deprecated
  
  if (!GUIlogic.IsInSpecialRoom()) { //we don't allow pause in the splashscreen or the main menu screen
    GUIlogic.HandleSpaceBar(); //our pause system conflicts a bit with dialog skipping. We need a special function
  }
  
}

function show_inventory_window () {
  // ** CUSTOM INVENTORY WINDOW
  gInventory.Visible = true;
  mouse.Mode = eModeInteract;

}

bool showConsole = false; // 'AGS console' module
function on_key_press(int keycode) {
  
  if (!GUIlogic.IsDebugPaused())
  {
    
      //Display("keypress"); //DEBUG
      
      // called when a key is pressed. keycode holds the key's ASCII code
            
      /*
      if (IsGamePaused() == 1) { //The game is currently paused.
        if (keycode == eKeySpace) { //the player pressed space => we exit pause
          GUIlogic.ExitPause();
          return;
        } else { //the player pressed another key; we ignore it by dumping the keystroke, and remain in pause.
          keycode=0; // (code 0 isn't used by AGS, it doesn't correspond to any key)
          return;
        }
      }

      //the "return" in the code section above guarantees that we don't deal twice with eKeySpace
      if (keycode == eKeySpace) { //the player pressed space => we exit pause
        GUIlogic.EnterPause();
      } 
        */
        
        
      //[Mathieu] I commented the code section below: why would we ant those shortcuts to pause the game???
      /*
      if ((   keycode==eKeyCtrlQ ) 
          || (keycode==317)//ALT-Q
          || (keycode==eKeyCtrlC ))
      {  
        if (IsGamePaused()==0) {
          GUIlogic.EnterPause();
        } else {
          
          
          
        }
      }
      */
      
      /* AGS console module 
      if (keycode == eKeyCtrlC && !gCheckpoints.Visible) //Ctrl+C displays the debug console
      {
         if (!showConsole) {
           AGSConsole.ShowHide();
           showConsole = true;
         }    
         else
          showConsole = false;
      }
       end of AGS console module */
      
      

      
      //[Mathieu] I commented the code section below: a simple shortcut without even a confirmation
      // is too dangerous for the player!!! Who ever uses the "restart" shortcut anyway? ;)
      /*
      if (keycode==eKeyF9) {
        RestartGame();  // F9
      }
      */
      
      
      if (keycode==eKeyF12) {
        SaveScreenShot("scrnshot.bmp");  // F12
      }
      // comment out debug shortcuts
      /*
      if (keycode==19) {
        Debug(0,0);  // Ctrl-S, give all inventory
      }
      
      if (keycode==22) {
        Debug(1,0);  // Ctrl-V, version
      }
      
      if (keycode==1) {
        Debug(2,0);  // Ctrl-A, show walkable areas
      }
      if (keycode==24) {
        Debug(3,0);  // Ctrl-X, teleport to room
      }
      */
      if (keycode==22) {
        Debug(1,0);  // Ctrl-V, version
      }
      // Enable or Disable double-click running
      if (keycode == eKeyR) {
        WalkFast.SwitchWalkfastFeature(); //turns it on or off
      }
  }
}



function on_mouse_click(MouseButton button) {
   
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  // normal commands
  else if (button == eMouseLeft) {
    WalkFast.OnMouseClick_left(); //manage walk fast feature
    
    if (mouse.Mode == eModeUseinv) {
        SetUseItem(player.ActiveInventory.ID);
    }
    
    ProcessClick(mouse.x, mouse.y, mouse.Mode ); // process interaction
    ActionsLogic.ResetCursor(); //go back to "walk to" with no inventory item selected
  }
  
  // Obvious Verb
  else if (button == eMouseRight){
  
    player.StopWalkFast(); //return to normal walking speed

    CursorMode rightClickMode = ActionsLogic.GetAvailableRightClick();
    ProcessClick(mouse.x, mouse.y, rightClickMode );
    ActionsLogic.ResetCursor();  //go back to "walk to" with no inventory item selected


  // run
  }
  else if (button == eMouseMiddle) { 
    player.StartWalkFast();
    ProcessClick(mouse.x, mouse.y, mouse.Mode );// process interaction
    ActionsLogic.ResetCursor();  //go back to "walk to" with no inventory item selected
  }
  
  //Handles eMouseInvLeft and eMouseInvRight
  //Note: "Override built-in inventory window click" must be enabled in the General Settings
  CustomInventory.OnMouseClick(button);
  
}

//when player clicks on the "up" button of the inventory
function btnInvUp_Click(GUIControl *control, MouseButton button) {
  CustomInventory.ScrollUp();
  Display(String.Format("RC:%d",invCustomInv.RowCount));//DEBUG
}

//when player clicks on the "down" button of the inventory
function btnInvDown_Click(GUIControl *control, MouseButton button) {
  CustomInventory.ScrollDown();
}

//START OF CONTROL PANEL FUNCTIONS
function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Save_OnClick();
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Load_OnClick();
}

function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Resume_OnClick();
  AGSConsole.HiddenActivation(0); //we reset the cheat code sequence
}

function btnExit_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Exit_OnClick();
}

function btnMenu_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Menu_OnClick();
}

//END OF CONTROL PANEL FUNCTIONS

// LOAD/SAVE DIALOGS

// Save Dialog

// OBSOLETE : Old Done Button
function done_OnClick(GUIControl *control, MouseButton button)
{
  CustomSave.Done_OnClick();
  Display("How did you get here? This dialog box has been deprecated and shouldn't be accessible!");
}

// OBSOLETE : Old Save Button
function save_OnClick(GUIControl *control, MouseButton button)
{
  //CustomSave.Save_OnClick();
  Display("How did you get here? This dialog box has been deprecated and shouldn't be accessible!");
}

// OBSOLETE : Old List Box of Saves
function lstSaveGames_OnSelectionChange(GUIControl *control)
{
    //CustomSave.OnSelectionChange(control);
    Display("How did you get here? This dialog box has been deprecated and shouldn't be accessible!");
}

// Load Dialog

// OBSOLETE : Old Done Button
function loadDone_OnClick(GUIControl *control, MouseButton button)
{
  CustomLoad.Done_OnClick();
  Display("How did you get here? This dialog box has been deprecated and shouldn't be accessible!");
}

// OBSOLETE : Old Load button
function load_OnClick(GUIControl *control, MouseButton button)
{
  //CustomLoad.Load_OnClick();
  Display("How did you get here? This dialog box has been deprecated and shouldn't be accessible!");
}

// OBSOLETE : Old List Box of Loads
function lstLoadGames_OnSelectionChange(GUIControl *control)
{
  //CustomLoad.OnSelectionChange(control);
  Display("How did you get here? This dialog box has been deprecated and shouldn't be accessible!");
}






/////////////////////Below this line : NEW Save/Load GUI///////////////////////////////////////////
//
// SAVE
//
// Save GUI interactions
function gSave_OnClick(GUI *theGui, MouseButton button) {
  CustomSave2.Gui_OnClick();
}

function btnSaveOK_OnClick(GUIControl *control, MouseButton button) {
  CustomSave2.Save_OnClick();
}

function btnSaveCancel_OnClick(GUIControl *control, MouseButton button) {
  CustomSave2.Close_OnClick();
}

function lstSaveGames2_SelectionChange(GUIControl *control) {
  CustomSave2.OnSelectionChange(control);
}

function btnSaveDelete_OnClick(GUIControl *control, MouseButton button) {
  CustomSave2.Delete_OnClick();
}

  // LOAD

// Load GUI interactions
function gLoad_OnClick(GUI *theGui, MouseButton button) {
  CustomLoad2.Gui_OnClick();
}

function btnLoadOK_OnClick(GUIControl *control, MouseButton button) {
  CustomLoad2.Load_OnClick();
}

function btnLoadDelete_OnClick(GUIControl *control, MouseButton button) {
  CustomLoad2.Delete_OnClick();
}

function btnLoadCancel_OnClick(GUIControl *control, MouseButton button) {
  CustomLoad2.Close_OnClick();
}

function lstLoadGames2_SelectionChange(GUIControl *control) {
  CustomLoad2.OnSelectionChange(control);
}

///////////////ABOVE this line : NEW save/load Gui /////////////////////////////
//
// END OF ADDITIONAL DIALOGS
//
// Main Menu

function newGame_OnClick(GUIControl *control, MouseButton button)
{
  TitleMenu.NewGame_OnClick();
}

function loadGame_OnClick(GUIControl *control, MouseButton button)
{
  TitleMenu.Load_OnClick();
}

function quitGame_OnClick(GUIControl *control, MouseButton button)
{
  TitleMenu.Quit_OnClick();
}

// Quit Menu
function yesBtn_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function noBtn_OnClick(GUIControl *control, MouseButton button)
{
  gQuitMenu.Visible = false;
}

// Menu Menu (that's the confirmation dialog asking you if you want to 
// go back to the main menu)

function yesMenu_OnClick(GUIControl *control, MouseButton button)
{
  // go to menu by restarting (required for game to run properly again)
  RestartGame();
  
  GUIlogic.TitleMenu_Show();
}

function noMenu_OnClick(GUIControl *control, MouseButton button)
{
  gTitleMenu.Visible = false;
}


//////////////////////////////////////////////////////////////////////////



// Mulbray

function cMulbray_AnyClick()
{
  CharactersLogic.Mulbray(game.used_mode);
}




//////////////////////////////////////////////////////////////////////////




// Irene

function cIrene_AnyClick()
{
  
  CharactersLogic.Irene(game.used_mode);
}


//////////////////////////////////////////////////////////////////////////



// Biff

function cBiff_AnyClick()
{
  CharactersLogic.Biff(game.used_mode);
}

// Bruno

function cBruno_AnyClick()
{
  CharactersLogic.Bruno(game.used_mode);
}


// items

// Oil Can



function iOilCan_OtherClick()
{

  ItemsLogic.OilCan();
}

/*
// Use
function iOilCan_Interact()
{
  //player.Say("No, I don't want to get my hands covered in oil.");
  ItemsLogic.OilCan(eModeInteract);
}

// Look
function iOilCan_Look()
{
  //player.Say("It's an oil can I took from the janitor's closet.");
  ItemsLogic.OilCan(eModeLookat);
}


// Talk
function iOilCan_Talk()
{
  //player.Say("I don't think that will work.");
  ItemsLogic.OilCan(eModeTalkto);
}

// Use Inventory
function iOilCan_UseInv()
{
  ItemsLogic.OilCan(eModeUseinv);
}
*/


// Office Key



function iKey_OtherClick()
{

  ItemsLogic.OfficeKey();
}

/*
// Use
function iKey_Interact()
{
  //player.Say("That won't work.");
  ItemsLogic.OfficeKey(eModeInteract);
}

// Look
function iKey_Look()
{
  //player.Say("It's the key to my office cabinet.");
  ItemsLogic.OfficeKey(eModeLookat);
}

// Talk
function iKey_Talk()
{
  //player.Say("That won't do anything.");
  ItemsLogic.OfficeKey(eModeTalkto);
}

// Use Inventory
function iKey_UseInv()
{
  ItemsLogic.OfficeKey(eModeUseinv);
  
}
*/


// Telegram


function iTelegram_OtherClick()
{
  ItemsLogic.Telegram();  
}
/*
// Use
function iTelegram_Interact()
{

  ItemsLogic.Telegram(eModeInteract);
}

// Look
function iTelegram_Look()
{
  ItemsLogic.Telegram(eModeLookat);  
}



// Talk
function iTelegram_Talk()
{
//  player.Say("I don't think that will work.");
  ItemsLogic.Telegram(eModeTalkto);  
  
}

// Use Inventory
function iTelegram_UseInv()
{
    ItemsLogic.Telegram(eModeUseinv);  
}
*/

// Tire Repair

// Use
function iTireRepair_Interact()
{
  player.Say("I have no need to fix a tire...");
}

// Look
function iTireRepair_Look()
{
  player.Say("It's a tire repair kit.");
}

function iTireRepair_OtherClick()
{
  // Close
  if (Mouse.Mode == eModeClose) {
    player.Say("That won't work.");
  }
  // Open
  if (Mouse.Mode == eModeOpen) {
    player.Say("I can't open that!");
  }
  // Pull
  if (Mouse.Mode == eModePull) {
    player.Say("I can't pull that!");
  }
  // Push
  if (Mouse.Mode == eModePush) {
    player.Say("That won't work.");
  }
}

// Talk
function iTireRepair_Talk()
{
  player.Say("I doubt that would do anything.");
}

// Use Inventory
function iTireRepair_UseInv()
{
  player.Say("That won't work.");
}

// Wallet



function iWallet_OtherClick()
{
  /*
  // Close
  if (Mouse.Mode == eModeClose) {
    player.Say("That won't work.");
  }
  // Open
  if (Mouse.Mode == eModeOpen) {
    player.Say("I can't open that!");
  }
  // Pull
  if (Mouse.Mode == eModePull) {
    player.Say("I can't pull that!");
  }
  // Push
  if (Mouse.Mode == eModePush) {
    player.Say("That won't work.");
  }*/
  ItemsLogic.Wallet();
}
/*
// Use
function iWallet_Interact()
{
  player.Say("I can't do that.");
}

// Look
function iWallet_Look()
{
  player.Say("It's my wallet.");
}

// Talk
function iWallet_Talk()
{
  player.Say("That won't accomplish anything.");
}

// Use Inventory
function iWallet_UseInv()
{
  player.Say("That can't work.");
}
*/


function iCompass_OtherClick()
{
  ItemsLogic.Compass();
}


function iCompassNote_OtherClick()
{
  ItemsLogic.CompassNote();
}


function dialog_request(int param) {
}


function buttonCheckpoint_OnClick(GUIControl *control, MouseButton button)
{
  CheckpointsGui.OnButtonClick();
  //PlayerUI.EnableAndShow();
  
}



function cStudent02_AnyClick()
{
  
  CharactersLogic.Student2(game.used_mode);
}

function Button1_OnClick(GUIControl *control, MouseButton button)
{
  CheckpointsGui.OnNoMusicClick();
}

function cStudent07_AnyClick()
{
  CharactersLogic.Student7(game.used_mode);
}

function cStudent06_AnyClick()
{
  CharactersLogic.Student6(game.used_mode);
}

function cStudent05_AnyClick()
{
  CharactersLogic.Student5(game.used_mode);
}

function cStudent01_AnyClick()
{
  CharactersLogic.Student1(game.used_mode);
}




function iBarnett_Hammer1_OtherClick()
{
  ItemsLogic.Hammer1();
}

function iBarnett_Hammer2_OtherClick()
{
  ItemsLogic.Hammer2();
}

function DebugButton1_OnClick(GUIControl *control, MouseButton button)
{
  Display("Stop_Ambient_All()");
  Stop_Ambient_All(); //DEBUG
}

function DebugButton2_OnClick(GUIControl *control, MouseButton button)
{
  Display("aSound3.Stop_Ambient()");  
  aSound3.Stop_Ambient();//DEBUG
} 
function DebugButton3_OnClick(GUIControl *control, MouseButton button)
{
  Display("aSound3.Play_Ambient();");  
  aSound3.Play_Ambient(100);//DEBUG
}

function bScrollCheckpointsUp_OnClick(GUIControl *control, MouseButton button)
{
  ListBoxCheckpoints.ScrollUp();
  
}

function bScrollCheckpointsDown_OnClick(GUIControl *control, MouseButton button)
{
  ListBoxCheckpoints.ScrollDown();
}


function bScrollCheckpointsEnd_OnClick(GUIControl *control, MouseButton button)
{
  ListBoxCheckpoints.SelectedIndex = ListBoxCheckpoints.ItemCount - 1;
}

function cStudentPink_AnyClick()
{
  CharactersLogic.StudentPink(game.used_mode);
}

function cStudentBiff_AnyClick()
{
  CharactersLogic.StudentBiff(game.used_mode);
}

function cStudentFat_AnyClick()
{
  CharactersLogic.StudentFat(game.used_mode);
}

function cStudentTie_AnyClick()
{
  CharactersLogic.StudentTie(game.used_mode);
}

function cStudentRedhead_AnyClick()
{
  CharactersLogic.StudentRedhead(game.used_mode);
}

function bDisclaimerExit_OnClick(GUIControl *control, MouseButton button)
{
  Display("There's no shame in being a Disney attorney! Bye bye!");
  QuitGame(0);
}

function bDisclaimerTickbox_OnClick(GUIControl *control, MouseButton button)
{
  Disclaimer.Tickbox_OnClick();
}

function bDisclaimerProceed_OnClick(GUIControl *control, MouseButton button)
{
  Disclaimer.Proceed_OnClick();
}

/* AGS console module */
function txtConsole_OnActivate(GUIControl *control){
  String command = txtConsole.Text;
  txtConsole.Text = ""; //we empty the prompt
  AGSConsole.LogInput(command);
}

function bConsoleVariables_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.Variables_OnClick();
}

function bConsoleHelp_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.Help_OnClick();
}

function bConsoleScript_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.Scripts_OnClick();
}

function bConsoleBetaTest_OnClick(GUIControl *control, MouseButton button)
{
 
  if (DebugGui.IsReduced()) {
    AGSConsole.ShowHide();
    DebugGui.ShowHide();
  }
}

function bConsoleUp_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.ScrollUp();
}

function bConsoleDown_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.ScrollDown();
}




/* end of AGS console module */

/* UltraVariables */
function buttonDeNGClose_OnClick(GUIControl *control, MouseButton button)
{
  //Display("click");
  Dbg.ShowHideVariables();
}

function buttonDengTimerTab_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.SwitchToTab(eUltraVariablesTabAGSTimers);
}

function buttonDengNamedTab_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.SwitchToTab(eUltraVariablesTabNamed);
}

function buttonDengGlobalTab_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.SwitchToTab(eUltraVariablesTabGlobals);
}


/*
function bVariableDown_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.ScrollDown();
}

function bVariableUp_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.ScrollUp();
}
*/


/* end of UltraVariables */


function gBetaTesting_OnClic(GUI *theGui, MouseButton button)
{

}


//the two buttons below control if the player has clicked on the
//first of the two hidden spots where he should click
//to display the console in the Release version of the game.
//See also  : bHiddenButton1_OnClick(..), bHiddenButton2_OnClick(...)

function bHiddenButton1_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.HiddenActivation(1);
}

function bHiddenButton2_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.HiddenActivation(2);
}

function cSP_PrisonerGeorge_AnyClick()
{
  int x=152;
  int y=69;
  ObjectTypes ObjType = eCharacter;
  
  
  if (game.used_mode == eModeLookat) {
    player.FaceAndSay2 (x, y, "Nothing special about him.");
  } else if (game.used_mode == eModeInteract || game.used_mode==eModePickup || game.used_mode==eModePull || game.used_mode==eModePush) {
    player.FaceAndSay2 (x, y, "I don't want to pester him!");
  } else if (game.used_mode==eModeTalkto) {
    dPrisonerGeorge.Start();
  } else {player.DoStandard4 (x, y, eCharacter);
  }  

}

function cSP_GeorgeGuard_AnyClick()
{
  int x=391;
  int y=70;
  ObjectTypes ObjType = eCharacter;
  
  if (game.used_mode == eModeLookat) {
    player.FaceAndSay2 (x, y, "He wont move away frome there!");
    player.FaceAndSay2 (x, y, "Maybe I'll have to find a way to distract him.");
  } else if (game.used_mode == eModePickup || game.used_mode == eModeInteract) {
    player.FaceAndSay2 (x, y, "Nah, he is not my type.");
  } else if (game.used_mode == eModePush || game.used_mode==eModePull) {
    player.FaceAndSay2 (x, y, "No, maybe this will piss him off.");
  } else if (game.used_mode==eModeTalkto) {
    player.Walk (373, 110, eBlock, eWalkableAreas);
    dGeorgeGuard.Start();
  }

}

function cSP_NaziCar_AnyClick()
{
  int x=131;
  int y=96;
  ObjectTypes ObjType = eCharacter;
  
  if (game.used_mode == eModeLookat) {
    player.FaceAndSay2 (x, y, "Looks like he is having some problems.");
  } else if (game.used_mode == eModeInteract) {
    player.FaceAndSay2 (x, y, "Nah, he is not my type.");
  } else if (game.used_mode == eModePickup) {
    player.FaceAndSay2 (x, y, "Nah, he is not my type.");
  } else if (game.used_mode == eModePush || game.used_mode==eModePull) {
    player.FaceAndSay2 (x, y, "No, maybe this will piss him off.");
  } else if (game.used_mode == eModeTalkto && DialogsLogic.GetVar("eDialog_IndyCanBypassNaziDriver")==0) { 
    player.Walk (181, 118, eBlock, eWalkableAreas);
    dNazi_Car.Start();
  } else if (game.used_mode == eModeTalkto && DialogsLogic.GetVar("eDialog_IndyCanBypassNaziDriver")==1 && DialogsLogic.GetVar("eDialog_IndyGetsRidNaziDriver")==0) {     // Indy asks Nazis Name
    player.Walk (53, 103, eBlock, eWalkableAreas);
    player.FaceAndSay2 (x, y, "What was your name again?");
    cSP_NaziCar.Say ("Fritz. Now go ahead and don't waste my time any more!");
    DialogsLogic.SetVar("eDialog_IndyKnowsNaziDriversName", 1);                         //Indy Knows Nazi Driver Name and can mention it to Nazi Guard
  } else if (game.used_mode == eModeTalkto && DialogsLogic.GetVar("eDialog_IndyGetsRidNaziDriver")==1) {
    player.Walk (53, 103, eBlock, eWalkableAreas);
    dNazi_Car.Start();
  } else {player.DoStandard4 (x, y, eCharacter);
}

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// BELOW THIS LINE SCRIPT REGARDS TO GUI SETTINGS
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

function Interface_OnClick(GUIControl *control, MouseButton button)
{
gSettings.Visible=false;
gInterface.Visible=true;
}

function Sound_OnClick(GUIControl *control, MouseButton button)
{
gSettings.Visible=false;
gSound.Visible=true;
}

function DisplayButton_OnClick(GUIControl *control, MouseButton button)
{
gSettings.Visible=false;
gDisplay.Visible=true; 
Button11.Visible=true;
Button12.Visible=false;
Button13.Visible=false;
Button14.Visible=true;
}

function Controls_OnClick(GUIControl *control, MouseButton button)
{
gSettings.Visible=false;
gControl.Visible=true;}

function Jukebox_OnClick(GUIControl *control, MouseButton button)
{
gSettings.Visible=false;
gJukebox.Visible=true;}

function Resume_OnClick(GUIControl *control, MouseButton button)
{
gSettings.Visible=false;
}

function Back_OnClick(GUIControl *control, MouseButton button)
{
gInterface.Visible=false;
gSound.Visible=false;
gDisplay.Visible=false;
gControl.Visible=false;
gJukebox.Visible=false;
gSettings.Visible=true;
}



function Voice_OnChange(GUIControl *control)
{
//SetSpeechVolume ();
}


function Button7_OnClick(GUIControl *control, MouseButton button)
{
Display ("This button enanles Tap interface");
}

function Button6_OnClick(GUIControl *control, MouseButton button)
{
Display ("This Button enables Computer Interface");
}

function Button8_OnClick(GUIControl *control, MouseButton button)
{
Display ("This button enables 9 Verb Interface");
}

function Button9_OnClick(GUIControl *control, MouseButton button)
{
Display ("This button enables Verb Coin ");
}

function MusicInterface_OnClick(GUIControl *control, MouseButton button)
{
Display ("This button mutes music");
}

function Button5_OnClick(GUIControl *control, MouseButton button)
{
Display ("This button mutes voices");
}

function Button10_OnClick(GUIControl *control, MouseButton button)
{
Display ("This button mutes sound effects");
}

function Button11_OnClick(GUIControl *control, MouseButton button)
{
Button12.Visible=false;
Button14.Visible=true;
}

function Button12_OnClick(GUIControl *control, MouseButton button)
{
Button11.Visible=false;
Button13.Visible=true;
}

function Button14_OnClick(GUIControl *control, MouseButton button)
{
Button12.Visible=true;
Button11.Visible=false;
Button13.Visible=true;
Button14.Visible=false;
}

function Button13_OnClick(GUIControl *control, MouseButton button)
{
Button11.Visible=true;
Button12.Visible=false;
Button14.Visible=true;
Button13.Visible=false;
}




////////////////////////////////////////////////////////////////////////////////////
// 9verb GUI handling
////////////////////////////////////////////////////////////////////////////////////


// Globals from GUIscript
import int ActionLabelColorHighlighted;
import char key_l_yes, key_u_yes, key_l_no, key_u_no; 
import int action_l_keycode[A_COUNT_]; 
import int action_u_keycode[A_COUNT_];
import int GStopsaveitem;
import int listBoxGap;
import int lang;
import InventoryItem*ItemGiven; 


function Action_Click(GUIControl *control, MouseButton button) {
  Action tempbutton = getButtonAction(control.ID);
  SetAction(tempbutton);
}

function btnMainOpt_OnClick(GUIControl *control, MouseButton button)
{
  AdjustGUIText();
  if (!gRestart.Visible && !gConfirmexit.Visible)
  gOptions.Visible=true;
}

function ScrollInv_Click(GUIControl *control, MouseButton button) {
  if (control==InvUp) MainInv.ScrollUp();
  else MainInv.ScrollDown();  
}

function Options_Click(GUIControl *control, MouseButton button) {
	if (control==OptionsSave)	{
		//save game
		gOptions.Visible=false;
		GetLucasSavegameListBox(SaveListBox);
		gSave.Visible=true;
	}
	if (control==OptionsLoad)	{
		//load game
		gOptions.Visible=false;
		GetLucasSavegameListBox(RestoreListBox);
    RestoreListBox.TopItem=0;
		gRestore.Visible=true;
	}
	if (control==OptionsPlay)	{
		// continue playing
		gOptions.Visible=false;
	}
	if (control==OptionsQuit)	{
		// exit??
    gOptions.Visible=false;
		gConfirmexit.Visible=true;
	}
}

function OptionsRestart_OnClick(GUIControl *control, MouseButton button)
{
    gOptions.Visible=false;
		gRestart.Visible=true;
}

function OptionsDefault_OnClick(GUIControl *control, MouseButton button)
{
  OptionsSldMusic.Value = 80;
  OptionsSldSound.Value = 90;
  OptionsSldSpeed.Value = 40;
#ifdef USE_OBJECT_ORIENTED_AUDIO
  Game.SetAudioTypeVolume(eAudioTypeMusic, OptionsSldMusic.Value, eVolExistingAndFuture);  
  Game.SetAudioTypeVolume(eAudioTypeSound, OptionsSldSound.Value, eVolExistingAndFuture); 
  Game.SetAudioTypeVolume(eAudioTypeAmbientSound, OptionsSldSound.Value, eVolExistingAndFuture); 
#endif

#ifndef USE_OBJECT_ORIENTED_AUDIO
  SetSoundVolume(OptionsSldSound.Value);
  SetMusicVolume(OptionsSldMusic.Value);
#endif
  SetGameSpeed(OptionsSldSpeed.Value);
}

function OptionsSldMusic_OnChange(GUIControl *control)
{
#ifdef USE_OBJECT_ORIENTED_AUDIO
  Game.SetAudioTypeVolume(eAudioTypeMusic, OptionsSldMusic.Value, eVolExistingAndFuture);
#endif
#ifndef USE_OBJECT_ORIENTED_AUDIO
  SetMusicVolume(OptionsSldMusic.Value);
#endif

}
function OptionsSldSound_OnChange(GUIControl *control)
{
#ifdef USE_OBJECT_ORIENTED_AUDIO
  Game.SetAudioTypeVolume(eAudioTypeSound, OptionsSldSound.Value, eVolExistingAndFuture); 
  Game.SetAudioTypeVolume(eAudioTypeAmbientSound, OptionsSldSound.Value, eVolExistingAndFuture); 
#endif
#ifndef USE_OBJECT_ORIENTED_AUDIO
  SetSoundVolume(OptionsSldSound.Value);
#endif  

}


function OptionsSldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(OptionsSldSpeed.Value);
}

function Restore_Click(GUIControl *control, MouseButton button) {
  if (control==RestoreCancel) gRestore.Visible=false;
  if (control==RestoreScrollUp)	{
  	if (GStopsaveitem < 5) GStopsaveitem = 0;
  	else GStopsaveitem -= 5;
  	RestoreListBox.TopItem=GStopsaveitem;
  }
  if (control==RestoreScrollDown) {
  if (GStopsaveitem < 90) {
      GStopsaveitem += 5;
      RestoreListBox.TopItem=GStopsaveitem;
    }
  }
}

function RestoreListBox_Click(GUIControl *control) {
  int index = RestoreListBox.SelectedIndex;
  String buffer=Game.GetSaveSlotDescription(index+100);
  if (buffer!=null) {
    gRestore.Visible=false;
    RestoreGameSlot(index + 100);
  } 
}

function Save_Click(GUIControl *control, MouseButton button) {
	int index = SaveListBox.SelectedIndex;
	String buffer;
	if (control==SaveCancel) {
		gSave.Visible=false;
		gSavetextbox.Visible=false;
	}
	if (control==SaveOK && index >= 0) {
		buffer=SaveTextBox.Text;
		gSave.Visible=false;
		gSavetextbox.Visible=false;
		SaveGameSlot (index + 100, buffer);
	}
	if (control==SaveScrollUp) {
		gSavetextbox.Visible=false;
		SaveListBox.SelectedIndex=-1;
		if (GStopsaveitem < 5) GStopsaveitem = 0;
		else GStopsaveitem -= 5;
		SaveListBox.TopItem=GStopsaveitem;
	}
	if (control==SaveScrollDown && GStopsaveitem < 90) {
		gSavetextbox.Visible=false;
		SaveListBox.SelectedIndex=-1;
		GStopsaveitem += 5;
		SaveListBox.TopItem=GStopsaveitem;
	}
}

function SaveListBox_Click(GUIControl *control) {
  int saveBox_ypos;
  int saveBox_xpos;
 	int index = SaveListBox.SelectedIndex;

	String buffer=String.Format("%d.", index+1);
	SaveLabel.Text=buffer;
	buffer=Game.GetSaveSlotDescription(index+100);
	if (buffer==null) buffer="";
	SaveTextBox.Text=buffer;
	
  saveBox_ypos = gSave.Y + SaveListBox.Y + ((index - GStopsaveitem) * (GetTextHeight(SaveLabel.Text, SaveLabel.Font, SaveLabel.Width)+listBoxGap));
  saveBox_xpos = GetTextWidth(SaveLabel.Text, SaveLabel.Font);
  SaveTextBox.SetPosition(saveBox_xpos, 0);
  
  gSavetextbox.SetPosition(gSave.X + SaveListBox.X, saveBox_ypos);
	gSavetextbox.Visible=true;
}

function SaveTextBox_Click(GUI *theGui, MouseButton button) {
  if (mouse.IsButtonDown(eMouseRight)) gSavetextbox.Visible=false;  
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ABOVE THIS LINE SCRIPT REGARDS TO GUI SETTINGS
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////



function cNative_Talk()
{
player.Walk (cNative.x -20,  cNative.y, eBlock, eWalkableAreas);
player.FaceCharacter (cNative, eBlock);
dNative.Start();
}




function cDog_AnyClick()
{
  int x=238;
  int y=92;
  
  ObjectTypes objType = eCharacter;
  
  if (game.used_mode == eModeTalkto) {
    player.FaceAndSay2 (x, y, "Who is a good dog?");
    cDog.Say ("Woof");
    player.FaceAndSay2 (x, y, "I better leave it be now!");
  } else if (game.used_mode == eModeLookat) {
    player.FaceAndSay2 (x, y, "He looks harmless.");
  } else {player.DoStandard4 (x, y, objType);
}
}




