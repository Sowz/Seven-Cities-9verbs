#define MAX_CHECKPOINTS 100

struct CheckpointData {
  String name;
};

int curCheckpoint = 1;  //we keep track of the id of the last registered checkpoint,
                        //because they can only be created in increasing order.
                        //note: our checkpoints start from 1 because enums (such as CheckPointsEnum) also start from 1.

//bool _skipCutsceneIfAny = false;

/*
static bool CheckPoints::ShouldSkipCutscene_Consume() {
  bool result = _skipCutsceneIfAny;
  _skipCutsceneIfAny = false;
  return result;
}
*/


CheckpointData checkpointsData[MAX_CHECKPOINTS];

bool checkpointInitialized = true; //is false after a "jump to" until all variables have been set in the destination room
int requestedCheckpoint = 1;


static void CheckPoints::RegisterNew(int id ,  String name) 
 {
   
   //safety: do we follow the process and register the checkpoints in increasing order?
   if (id != curCheckpoint) {
     AbortGame(String.Format("Programing mistake: you didn't register the checkpoints in the logical order: 0,1,2,... Or maybe you entered this room twice. (Expected %d, found %d)", curCheckpoint, id));
   }   

   //safety: does it already exist?
   if (checkpointsData[id].name != null) {
     AbortGame("Programing mistake: you declared two checkpoints with the same ID");
   }
   
   checkpointsData[id].name = name;
   ListBoxCheckpoints.AddItem(String.Format("(%d) : %s", id,  name));
   curCheckpoint++;
 }
 
static void CheckPoints::RegisterAll() 
 {
   CheckPoints.RegisterNew(eChckpnt_01_Disclaimer,                            "MENU: eChckpnt_01_Disclaimer") ;
   CheckPoints.RegisterNew(eChckpnt_02_MainMenu,                        "MENU: eChckpnt_02_MainMenu") ;
   CheckPoints.RegisterNew(eChckpnt_03_IndysClassroom_chalkboardCutscene,"BARNETT: eChckpnt_03_IndysClassroom_chalkboardCutscene") ;
   CheckPoints.RegisterNew(eChckpnt_04_IndysClassroom_studentsPuzzle,   "BARNETT: eChckpnt_04_IndysClassroom_studentsPuzzle") ;   
   CheckPoints.RegisterNew(eChckpnt_05_IndysClassroom_studentsPuzzle2,  "BARNETT: eChckpnt_05_IndysClassroom_studentsPuzzle2") ;   
   CheckPoints.RegisterNew(eChckpnt_06_BarnettCorridor,                 "BARNETT: eChckpnt_06_BarnettCorridor") ;  
   CheckPoints.RegisterNew(eChckpnt_07_BarnettReadTelegram,             "BARNETT: eChckpnt_07_BarnettReadTelegram") ;   
   CheckPoints.RegisterNew(eChckpnt_07_BarnettOutside,                  "BARNETT: eChckpnt_07_BarnettOutside") ;   
   CheckPoints.RegisterNew(eChckpnt_08_TibetTop,                        "TIBET: eChckpnt_08_TibetTop") ;   
   CheckPoints.RegisterNew(eChckpnt_09_MirrorsTests,                    "DEBUG: eChckpnt_09_MirrorsTests") ;   
   CheckPoints.RegisterNew(eChckpnt_10_NewClassRoom,                    "BARNETT: eChckpnt_10_NewClassRoom") ;   
   CheckPoints.RegisterNew(eChckpnt_11_NewChalkboard,                   "BARNETT: eChckpnt_11_NewChalkboard") ;   
   CheckPoints.RegisterNew(eChckpnt_12_FontsTests,                      "DEBUG: Fonts tests") ;   
   CheckPoints.RegisterNew(eChckpnt_13_SpainDigSite,                    "SPAIN: eChckpnt_13_SpainDigSite") ;   
   CheckPoints.RegisterNew(eChckpnt_14_SpainTruckCutscene,              "SPAIN: eChckpnt_14_SpainTruckCutscene") ;   
   CheckPoints.RegisterNew(eChckpnt_15_TextArea,                        "DEBUG: eChckpnt_15_TextArea") ;   
   CheckPoints.RegisterNew(eChckpnt_16_FoAcredits,                      "DEBUG: eChckpnt_16_FoAcredits") ;   
   CheckPoints.RegisterNew(eChckpnt_17_RegularCredits,                  "MENU: eChckpnt_17_RegularCredits") ;   
   CheckPoints.RegisterNew(eChckpnt_18_Mirrors2,                        "DEBUG: Mirrors 2") ;   
   CheckPoints.RegisterNew(eChckpnt_19_Flagstaff_cave,                  "ARIZ: Cave entrance") ;   
   CheckPoints.RegisterNew(eChckpnt_20_SPAINcountryside,                "SPAIN: countryside") ;   
   CheckPoints.RegisterNew(eChckpnt_21_DEBUGiciclesTests,               "DEBUG: icicles tests") ;   
   CheckPoints.RegisterNew(eChckpnt_22_BarnettOutside,                  "BARNETT: outside, telegram read") ;   
   CheckPoints.RegisterNew(eChckpnt_23_VENEZguardians,                  "VENEZ: Guardians") ;   
   CheckPoints.RegisterNew(eChckpnt_24_ParisCafeAndPhoneBooth,          "PARIS: eChckpnt_24_ParisCafeAndPhoneBooth") ;
   CheckPoints.RegisterNew(eChckpnt_25_ConventIndise,                   "PARIS: eChckpnt_25_ConventInside");
   CheckPoints.RegisterNew(eChckpnt_26_ChurchRuins,                     "PARIS: eChckpnt_26_ChurchRuins");
   CheckPoints.RegisterNew(eChckpnt_27_ConventYard,                     "PARIS: eChckpnt_27_ConventYard");
   CheckPoints.RegisterNew(eChckpnt_28_SpainGeorgeTent,                 "SPAIN: echckpnt_28_GeorgeTent");
   CheckPoints.RegisterNew(eChckpnt_29_SpainOfficerTent,                "SPAIN: echckpnt_29_OfficerTent");
   CheckPoints.RegisterNew(eChckpnt_30_FOACredits,                      "USELESS: same as 16.");
   CheckPoints.RegisterNew(eChckpnt_31_Credits,                         "TIBET: Escape slope & opening credits");
   CheckPoints.RegisterNew(eChckpnt_32_DEBUGJDE,                        "DEBUG: JDE");
   CheckPoints.RegisterNew(eChckpnt_33_GuiSettings,                     "GUI: Settings");
   CheckPoints.RegisterNew(eChckpnt_34_MexicoCrater,                    "Mexico : 12-03 Crater");
   CheckPoints.RegisterNew(eChckpnt_35_MexicoTest,                      "Mexico : 12-01 Test");
   CheckPoints.RegisterNew(eChckpnt_36_BlackMarketDen,                  "Jerusalem : 09-02 BlackMarketDen");
   CheckPoints.RegisterNew(eChckpnt_37_TibetIceCave,                    "Tibet : Ice Cave");

     
}
 
/*
static void CheckPoints::MainMenu() {
    player.ChangeRoom(eRoom_GUI_00_TitleMenu, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram_Cutscene() {
    player.Say("Let's take a look at that telegram.");
    prevX = player.x;
    prevY = player.y;
    gIconbar.Visible = false;
    gInventory.Visible = false;
    gStatusline.Visible = false;
    player.ChangeRoom(eRoom_02_09_BarnettTelegram, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram() {
  
  //give needed objects
  player.AddInventory(iOilCan);
  player.AddInventory(iTelegram);
  
  //arbitrarily go to Indy's office
  player.ChangeRoom(6,  160,  140);
  WAIT_10
  
}

static void CheckPoints::Barnett_NewGame() {
  StopMusic();
  if (!CheckPoints.ShouldSkipCutscene_Consume()) {
    player.ChangeRoom(eRoom_02_00_ChalkboardHand, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  } else {  
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  }
    
}

static void CheckPoints::Barnett_Corridor() {
  StopMusic();
  
  //give proper objects
  //oil can
  //oilCan.Visible = false;
  player.AddInventory(iOilCan);    
  
  player.ChangeRoom(3, 500, 120);
}


static void CheckPoints::Spain_Test() {
  StopMusic();

  player.ChangeRoom(13, 1100, 130); 
  
    
}
*/

/*
  #ifdef TESTING
    gIconbar.Visible = true;
    gInventory.Visible = true;
    gStatusline.Visible = true;
    Mouse.Mode = eModeWalkto;
    SetMusicMasterVolume(0); //no sound
    
    //  player.ChangeRoom(3,  500,  125);
    player.AddInventory(iOilCan);
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  120);
  #endif
  */
  

static void CheckPoints::JumpDone() {
  checkpointInitialized = true;
}

static bool CheckPoints::IsJumping() {
  return !checkpointInitialized;
}

static int CheckPoints::RequestedCheckpoint() {
  return requestedCheckpoint;
}

  
 
static void CheckPoints::JumpTo(int checkpointIndex) {
  #ifdef TESTING
  //Display(String.Format("Jumping to checkpoint #%d", checkpointIndex));
  #endif
  
  //_skipCutsceneIfAny = false; //we always reset that
  requestedCheckpoint = checkpointIndex;
  checkpointInitialized = false;

  
  if (checkpointIndex == eChckpnt_01_Disclaimer) {
    //_skipCutsceneIfAny = false;
    //CheckPoints.MainMenu();
    player.ChangeRoom(20, 1, 1); //go to the disclaimer screen
  } else if (checkpointIndex ==eChckpnt_02_MainMenu) {
    //_skipCutsceneIfAny = true;
    //CheckPoints.MainMenu();
    player.ChangeRoom(eRoom_GUI_00_TitleMenu, 1, 1);
  } else if (checkpointIndex ==eChckpnt_03_IndysClassroom_chalkboardCutscene) {
    //_skipCutsceneIfAny = false;
    //CheckPoints.Barnett_NewGame();
    player.ChangeRoom(eRoom_02_00_ChalkboardHand, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  } else if (checkpointIndex ==eChckpnt_04_IndysClassroom_studentsPuzzle) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_NewGame();
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  } else if (checkpointIndex ==eChckpnt_05_IndysClassroom_studentsPuzzle2) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Spain_Test();
    //player.ChangeRoom(eRoom_05_02_DigSite, 1100, 130); //Spain
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  } else if (checkpointIndex ==eChckpnt_06_BarnettCorridor) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_Corridor();
    player.ChangeRoom(eRoom_02_03_BarnettCorridor, 631, 127);
  } else if (checkpointIndex ==eChckpnt_07_BarnettReadTelegram) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_Read_Telegram();
    player.ChangeRoom(eRoom_02_06_IndyOffice,  160,  140); //go to Indy's office
  } else if (checkpointIndex ==eChckpnt_07_BarnettOutside) {
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  140); //go to Indy's office
  } else if (checkpointIndex ==eChckpnt_08_TibetTop) {
    player.ChangeRoom(eRoom_01_01_TibetTop,  217,  129); //go to Tibet mountain top
  } else if (checkpointIndex ==eChckpnt_09_MirrorsTests) {
    player.ChangeRoom(15,  65,  141); //go to Mirrors tests room
  } else if (checkpointIndex ==eChckpnt_10_NewClassRoom) {
    player.ChangeRoom(eRoom_02_02_IndyClassRoom_New,  160,  100); //go to new version of Indy's calssroom  
  } else if (checkpointIndex ==eChckpnt_11_NewChalkboard) {
    player.ChangeRoom(eRoom_02_00_ChalkboardHand,  160,  100); //go to new version of chalkboard 
  } else if (checkpointIndex ==eChckpnt_12_FontsTests) {
    player.ChangeRoom(19,  270,  150); //go to fonts tests screen (debug)
  } else if (checkpointIndex ==eChckpnt_13_SpainDigSite) {
    player.ChangeRoom(eRoom_05_02_DigSite,  1200, 120); //go to spanish digsite
  } else if (checkpointIndex ==eChckpnt_14_SpainTruckCutscene) {          // Demo purposes. Setting characters invisible
    player.Transparency = 100;
    cSP_NaziGuard.Transparency = 100;
    cSP_GeorgeGuard.Transparency = 100;     
    cSP_RandomNazi1.Transparency = 100;
    cSP_RandomNazi2.Transparency = 100;
    cSP_RandomNazi3.Transparency = 100;
    player.ChangeRoom(eRoom_05_02_DigSite,  480,120); //go to spanish digsite and play the truck cutscene
  } else if (checkpointIndex ==eChckpnt_15_TextArea) {
    player.ChangeRoom(21,  1200,  120); 
  } else if (checkpointIndex ==eChckpnt_16_FoAcredits) {
    player.ChangeRoom(22,  109, 119); 
  } else if (checkpointIndex ==eChckpnt_17_RegularCredits) {
    player.ChangeRoom(eRoom_GUI_01_EndCredits,  160,  0); 
  } else if (checkpointIndex ==eChckpnt_18_Mirrors2) {
    player.ChangeRoom(24,  160,  150); 
  } else if (checkpointIndex ==eChckpnt_19_Flagstaff_cave) {
    player.ChangeRoom(25,  2,  157);
  } else if (checkpointIndex ==eChckpnt_20_SPAINcountryside) {
    player.ChangeRoom(eRoom_05_01_CountrySide,  303,  80);
  } else if (checkpointIndex ==eChckpnt_21_DEBUGiciclesTests) {
    player.ChangeRoom(27,  160,  150);
  } else if (checkpointIndex ==eChckpnt_22_BarnettOutside) {
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  120);
  } else if (checkpointIndex ==eChckpnt_23_VENEZguardians) {
    player.ChangeRoom(eRoom_13_04_Guardians,  52, 104);
    //player.ChangeRoom(eRoom_13_04_Guardians,  40, 50);
    //player.ChangeRoom(29,  48, 103);
  } else if (checkpointIndex ==eChckpnt_24_ParisCafeAndPhoneBooth) {
    player.ChangeRoom(eRoom_07_05_ParisCafe,  259, 114);
  } else if (checkpointIndex ==eChckpnt_25_ConventIndise) {
    player.ChangeRoom(eRoom_07_06_ConventInside, 42, 46);
  } else if (checkpointIndex ==eChckpnt_26_ChurchRuins) {
    player.ChangeRoom(eRoom_07_07_ChurchRuins, 248, 155);
  } else if (checkpointIndex ==eChckpnt_27_ConventYard) {
    player.ChangeRoom(eRoom_07_02_ConventYard, 508, 115);
  } else if (checkpointIndex ==eChckpnt_28_SpainGeorgeTent) {
    player.ChangeRoom(eRoom_05_03_GeorgeTent, 199, 108);
  } else if (checkpointIndex ==eChckpnt_29_SpainOfficerTent) {
    player.ChangeRoom(eRoom_05_04_OfficerTent,141, 102);
  } else if(checkpointIndex == eChckpnt_30_FOACredits) { //USELESS. Does the same as checkpoint 16
    player.ChangeRoom(22, 108, 117);
  }else if (checkpointIndex == eChckpnt_31_Credits) {
    player.ChangeRoom (eRoom_01_04_EscapeSlopAndCredits,  80, 80);
  }else if (checkpointIndex == eChckpnt_32_DEBUGJDE) {
    player.ChangeRoom (96,  80, 80);
  } else if (checkpointIndex == eChckpnt_33_GuiSettings) {
    player.ChangeRoom(97, 0, 0);
  } else if (checkpointIndex == eChckpnt_34_MexicoCrater) {
    player.ChangeRoom(75, 38, 105);
  } else if (checkpointIndex == eChckpnt_35_MexicoTest) {
    player.ChangeRoom (73, 156, 70);
  } else if (checkpointIndex == eChckpnt_36_BlackMarketDen) {
    player.ChangeRoom (58, 150,  100);
  } else if (checkpointIndex == eChckpnt_37_TibetIceCave) {
    player.ChangeRoom (eRoom_01_02_IceCave, 163,  52);
  }
  else
  {
    Display(String.Format("Programing mistake: you forgot to implement checkpoint '%d'.",checkpointIndex));
    AbortGame(String.Format("Programing mistake: There is no checkpoint '%d'.",checkpointIndex));
  }
  
}

    