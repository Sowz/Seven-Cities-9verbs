
//removes all characters and sprites related to the students intrusion
function hideIntrusion()
{
  //room 17 is an arbitrary dumping room (actually, it's the chalkboard room)
  cNarr.ChangeRoom(17);
  cStudentBiff.ChangeRoom(17);
  cStudentPink.ChangeRoom(17);
  cStudentFat.ChangeRoom(17);
  cStudentTie.ChangeRoom(17);
  cStudentRedhead.ChangeRoom(17);
  
  oStudentsBackground.Visible= false;
  
  region[2].Enabled=false; //we disable the region that triggers indy refusing to go out
}

//plays the intrusion animation and brings all related characters and sprites intot his room
function doIntrusion() {
  hideIntrusion(); //DEBUG (we reset the animation)
  
  //we use the "pink student" character to play the students intrusion animation
  cStudentPink.ChangeRoom(16, 148, 110); //this animaiton is large: we position the character accordingly
  cStudentPink.LockView(INTRUSION);
  Wait(1); //freeze on frame one
  
  cNarr.ChangeRoom(16, 140, 40); //bring the narrator into this room
  cNarr.SpeechColor=12;
  cNarr.Say("Doctor Jones!"); //we use the narrator to make the students shout wherever we want on screen (otherwise the game tries to use the students talking view)
  cNarr.ChangeRoom(17);//we remove it from this room
  
  player.Say("uh oh...");
  player.Walk(player.x+25, player.y+15, eBlock);
  player.FaceDirection(eLeft);
  
  //animate the intrusion
  cStudentPink.Animate(0, 0, eOnce, eBlock, eForwards);
  cStudentPink.UnlockView();
  oStudentsBackground.Visible = true;//that's the image with a few secondary students, used in the background of important students
  
    //back to normal
  cStudentPink.ChangeView(PINK_WALK);
  cStudentPink.x=155;
  cStudentPink.y=95;
  cStudentPink.SetIdleView(PINK_IDLE, 0);

  //bring in other students
  cStudentBiff.ChangeRoom(16,  140,  56);
  cStudentBiff.SetIdleView(BIFF2_IDLE, 0);
  cStudentFat.ChangeRoom(16, 128, 65);
  cStudentFat.SetIdleView(FAT_IDLE, 0);  
  cStudentTie.ChangeRoom(16, 139, 58);
  cStudentTie.SetIdleView(TIE_IDLE, 0);  
  cStudentRedhead.ChangeRoom(16, 148, 57);
  cStudentRedhead.SetIdleView(REDHEAD_IDLE, 0);  
  
  cStudentPink.Say("We need to talk to you!");
  WAIT_10
  
  region[2].Enabled=true; //we enable the region that triggers indy refusing to go out

  Wait(1);
  
  
}


//animates the hands and heads of the sutdents in the foreground
function animateAllStudents() {
  cStudent8.SetIdleView(STUDENT8_IDLE1, 0); 
  cStudent9.SetIdleView(STUDENT9_IDLE1, 0); 
  cStudent10.SetIdleView(STUDENT10_IDLE, 0); 
/*
  cStudent8.LockView(STUDENT8_IDLE); 
  cStudent8.Animate(0, 2, eRepeat, eNoBlock);
  cStudent9.LockView(STUDENT9_IDLE);
  cStudent9.Animate(0, 2, eRepeat, eNoBlock);
  */
}


function room_FirstLoad()
{
  #ifdef DEMO
  Wait (60);
  IntroCredits_StartNextCredit(); //4
  Wait (40);
  player.ChangeRoom (23, 0, 0);
  #endif

  #ifdef TESTING
  if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
     
    CheckPoints.JumpDone(); //never forget to tell the engine we're done jumping.
                            //we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again
    

    if (CheckPoints.RequestedCheckpoint() == eChckpnt_10_NewClassRoom) {

      //nothing to do
    }
    


  } else {
    //nothing to do
  }
  #endif
  
  #ifndef TESTING
  //cutscene_beforeStudentsPuzzle();
  #endif

  /*
  //if we arrive from the board close-up, the player might be cIndy_closeup_suit
  if (player == cIndy_closeup_suit)
  {
    player.SetAsPlayer();
    cIndy_closeup_suit.Transparency=100; Wait(1);
    cIndy_closeup_suit.ChangeRoom(17);
    Wait(1);
  }
  */
  
  player.PlaceOnWalkableArea();//safety
  
  Mouse.Mode = eModeWalkto;
  PlayerUI.EnableAndShow(); 


  //DEBUG
  CharactersLogic.setIndyView_suit();
  //END OF DEBUG
  
  //EndCutscene(); //DEBUG TEST
  //player.x=239;
  //player.y=101;
  
}

function room_Load()
{
  aMusic1.Play();
    
  Doors.OnEnterRoom(); //this function must be called in EVERY ROOM that contains a door
  
  //ListBoxConsole.AddItem(String.Format("Area %d is currently %d",2, GetWalkableAreaAt(146, 104))); //DEBUG
  
  animateAllStudents();
  
  hideIntrusion();
  
  //EnableInterface(); //DEBUG. WE NEED TO FIND OUT WHY THIS IS NEEDED 
  
}

// Hotspots



function region1_Standing()
{
    player.ChangeRoom_ThroughDoor(oDoor1);
}

function room_AfterFadeIn()
{
  //just for debug
  player.Say("Hey yo, Mr. White!");
  player.Say("Imma make some badass pixel-art.");
  player.Say("Let's start cooking, BITCH.");
  //End of debug
}



function oDoor1_AnyClick()
{
  
  if (!DialogsLogic.GetVar("eDialog_StudentsPuzzleFullyResolved"))  //the students are still angry
  {
    if (!Doors.IsOpen(oDoor1) && game.used_mode == eModeOpen)
    {
      Doors.DefaultReaction_WalkFirst(oDoor1,  game.used_mode);
      doIntrusion();
    }
    else if(Doors.IsOpen(oDoor1) && game.used_mode == eModeClose)
    {
      player.Walk(160, 96); 
      cStudentPink.Say("Professor, are you trying to slam your door on us?");
      player.FaceDirection(eLeft);
      player.Say("Who? Me? Of course not.");
    }
    else if (Doors.IsOpen(oDoor1) && game.used_mode == eModeWalkto)
    {
      player.Say("I can't walk out, they're blocking the door. And they seem pretty decided.");
    }
    
    else //in every other case we act normally
    {
      Doors.DefaultReaction_WalkFirst(oDoor1,  game.used_mode);
    }
  }
  else //the angry students have left
  {
    Doors.DefaultReaction_WalkFirst(oDoor1,  game.used_mode);
  }
  
}




//the region that forbids Indy from sneaking out of the room while the students are still angry
function region2_WalksOnto()
{

  if (!DialogsLogic.GetVar("eDialog_StudentsPuzzleFullyResolved") && Doors.IsOpen(oDoor1)) {
    //make the students complain fast
    CharactersLogic.Students_SpeakFast2( "Professor!",
                                        "Where are you going?",
                                        "Not through the window again!",
                                        "We need an answer!");
    
    //we temporarily make Indy walk faster
    int speedX = player.WalkSpeedX; //we save the original speed
    int speedY = player.WalkSpeedY;  
    player.StopMoving();
    player.SetWalkSpeed(player.WalkSpeedX*2, player.WalkSpeedY*2);
    player.Walk(274,  135,  eBlock);
    player.StopMoving();
    player.SetWalkSpeed(speedX, speedY);//we restore the original speed


    player.FaceDirection(eLeft);
    player.Say("Don't be ridiculous. Of course I'm not leaving.");
  }

}

function region3_WalksOnto()
{
  if (!DialogsLogic.GetVar("eDialog_StudentsPuzzleFullyResolved") && Doors.IsOpen(oDoor1)) {
    player.Say("I can't walk out, they're blocking the door. And they seem pretty decided.");
    player.Walk(player.x+20,  player.y+5);
  }
  
}

/////////////////////////////////////


int xCompassWalk=244;
int yCompassWalk=108;

function CompassDescribe() {
    player.Say("Someone left that artifact on my desk before the class.");
    player.Say("Probably Irene, my secretary.");
    player.Say("I suppose a colleague of mine thought it would be of interest for me.");
}

bool seenCompass = false;

function oCompass_AnyClick()
{
  
  int mode = game.used_mode;
  
  if        (mode == eModeLookat) {
    player.FaceLocation(oCompass.X,  oCompass.Y,  eBlock);
    CompassDescribe();
    seenCompass = true;
    
  } else if (mode == eModePickup) {  
    player.Walk(xCompassWalk,  yCompassWalk,  eBlock);
    player.FaceLocation(oCompass.X,  oCompass.Y,  eBlock);
    if (!seenCompass)
      CompassDescribe();
    player.Say("I'll just take it.");
    oCompass.Visible = false;
    player.AddInventory(iCompass);
  } else {
    Unhandled();
  }  
}



bool tagTaken = false;
bool deskOpen = false;

int xDesk = 190;
int yDesk = 115;

function hDesk_AnyClick()
{
  /*
  if (game.used_mode == eModePull) {
    player.FaceAndSay2(xDesk, yDesk, "I don't want to pull that.");
  }
  if (game.used_mode == eModePush) {
    player.FaceAndSay2(xDesk, yDesk, "As much fun as it would be to push the desk and give myself a back spasm, I think I'll pass.");
  }
  if (game.used_mode == eModeGive) {
    player.FaceAndSay2(xDesk, yDesk, "I can't give to that.");
  }
  */
  
  //these are not the "walk to" coordinates. These define what point Indy faces
  int x = 190;
  int y =  116;
  eObjectType objType = eHeavy;
  
  if (game.used_mode == eModeLookat) {
    if (!tagTaken) {
      player.FaceAndSay2(x, y, "It's flat, and it has drawers. It's a desk.");
    }else {
      player.Walk(hDesk.WalkToX,  hDesk.WalkToY,  eBlock);
      player.FaceAndSay(eLeft,  "I don't think there is anything else in it.");   
    }
  } else if (game.used_mode == eModeOpen) {
    if (deskOpen) {
      player.Say("It's already open.");
    } else {
      player.Walk(hDesk.WalkToX,  hDesk.WalkToY,  eBlock);
      player.FaceAndSay(eLeft,  "I don't think there is anything in that drawer that can help.");
      WAIT_40
      player.Say("Wait! There is a small tag. I don't recall putting it in here.");
      player.Say("I'll take it.");
      player.AddInventory(iCompassNote);
      deskOpen = true;
      tagTaken = true;
    }
  }  else if (game.used_mode == eModeClose){
    if (deskOpen) {
      player.Say("I have more urgent matters to attend to, right now.");
    } else {
      player.Walk(hDesk.WalkToX,  hDesk.WalkToY,  eBlock);
      player.FaceAndSay(eLeft,  "It's already closed.");      
    }
  }  else if (game.used_mode == eModeGive){
    //DO NOTHING. We don't "give" objects to other objects.
  }  else { //every other interaction
    player.DoStandard4(x, y, objType);
  }
  
}